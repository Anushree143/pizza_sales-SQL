-- 1.Retrieve the total number of orders placed.

SELECT count(order_id) as total_orders
FROM orders

-- 2.Calculate the total revenue generated from pizza sales.

SELECT SUM(order_details.quantity * pizzas.price) as total_revenue
FROM order_details JOIN pizzas
ON order_details.pizza_id=pizzas.pizza_id;

-- 3.Identify the highest-priced pizza.

SELECT pizzas.price as max_price,pizza_types.name as pizza_type_name
FROM pizzas JOIN pizza_types
ON pizzas.pizza_type_id = pizza_types.pizza_types_id
ORDER BY pizzas.price DESC;

-- 4.Identify the most common pizza size ordered.

SELECT pizzas.size,count(order_details.order_details_id) as total_order
FROM pizzas JOIN order_details
ON pizzas.pizza_id = order_details.pizza_id
GROUP BY size
ORDER BY total_order DESC;

-- 5.List the top 5 most ordered pizza types along with their quantities.

SELECT sum(order_details.quantity) as quantity,pizzas.pizza_id as pizza_type,pizza_types.name
FROM order_details JOIN pizzas
ON pizzas.pizza_id = order_details.pizza_id
JOIN pizza_types
ON pizza_types.pizza_type_id=pizzas.pizza_type_id
GROUP BY pizza_types.name
ORDER BY quantity DESC
LIMIT 5;

-- 6.Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT sum(order_details.quantity)as total_quantity,pizza_types.category as category,pizza_types.name as name
FROM  pizza_types JOIN pizzas
ON  pizza_types.pizza_type_id=pizzas.pizza_type_id
JOIN order_details
ON pizzas.pizza_id = order_details.pizza_id
GROUP BY category;

-- 7.Determine the distribution of orders by hour of the day.

SELECT hour(orders.time) as Hour ,count(order_id) as order_count
FROM orders
GROUP BY Hour;

-- 8.Join relevant tables to find the category-wise distribution of pizzas.

SELECT category,count(name)
FROM pizza_types
GROUP BY category;

-- 9.Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT avg(quantity) from 
(SELECT orders.date as date,sum(order_details.quantity) as quantity
FROM orders
 JOIN order_details
ON orders.order_id = order_details.order_id
GROUP BY date) as order_quantity;

-- 10.Determine the top 3 most ordered pizza types based on revenue.

SELECT round(sum(pizzas.price * order_details.quantity),0) as revenue,pizza_types.name as name
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON pizzas.pizza_id = order_details.pizza_id
GROUP BY name
ORDER BY revenue DESC
LIMIT 3;

-- 11.Calculate the percentage contribution of each pizza type to total revenue.

SELECT pizza_types.category,round(sum(pizzas.price * order_details.quantity)/(SELECT SUM(order_details.quantity * pizzas.price) as total_revenue
FROM order_details JOIN pizzas
ON order_details.pizza_id = pizzas.pizza_id),2)*100 as revenue
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizza_types.category;

-- 12.Analyze the cumulative revenue generated over time.

SELECT orders.date,sum(revenue) over(order_by orders.date) as cum_rev
FROM
(SELECT orders.date,sum(pizzas.price * order_details.quantity) as revenue
FROM orders JOIN order_details
ON order_details.order_id = orders.order_id
JOIN pizzas
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY  orders.date) as sales;

-- 13.Determine the top 3 most ordered pizza types based on revenue for each pizza category.

SELECT name,revenue FROM
(SELECT(category,name,revenue,
rank()over(partition by category order by revenue desc) as rn
FROM
(SELECT pizza_types.category ,pizza_types.name,sum(pizzas.price * order_details.quantity) as revenue
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category,pizza_types.name) as a) as b
where rn <= 3;
